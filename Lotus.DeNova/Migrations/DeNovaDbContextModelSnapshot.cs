// <auto-generated />
using System;
using Lotus.DeNova;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lotus.DeNova.Migrations
{
    [DbContext(typeof(DeNovaDbContext))]
    partial class DeNovaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lotus.Account.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("PostId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("RoleId");

                    b.ToTable("User", "adm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3182c8f-87bc-4e27-a27f-b32e3e2b8018"),
                            Email = "dementevds@gmail.com",
                            EmailConfirmed = false,
                            Login = "DanielDem",
                            Name = "Даниил",
                            PasswordHash = "012f28fd2973783520fa3115f886102a09c8a15e",
                            Patronymic = "Сергеевич",
                            RoleId = 1,
                            Surname = "Дементьев"
                        });
                });

            modelBuilder.Entity("Lotus.Account.UserFieldActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("UserFieldActivity", "adm");
                });

            modelBuilder.Entity("Lotus.Account.UserFieldActivityRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldActivityId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFieldActivityRelation", "adm");
                });

            modelBuilder.Entity("Lotus.Account.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("UserGroup", "adm");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Хранители",
                            Name = "Хранители"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Север",
                            Name = "Север"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Юг",
                            Name = "Юг"
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "Восток",
                            Name = "Восток"
                        },
                        new
                        {
                            Id = 5,
                            DisplayName = "Запад",
                            Name = "Запад"
                        });
                });

            modelBuilder.Entity("Lotus.Account.UserGroupRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroupRelation", "adm");
                });

            modelBuilder.Entity("Lotus.Account.UserMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("UserMessage", "adm");
                });

            modelBuilder.Entity("Lotus.Account.UserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Importance")
                        .HasColumnType("integer");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Sender")
                        .HasColumnType("text");

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserNotification", "adm");
                });

            modelBuilder.Entity("Lotus.Account.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("UserPermission", "adm");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Администратор",
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Модератор",
                            Name = "editor"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Пользователь",
                            Name = "user"
                        });
                });

            modelBuilder.Entity("Lotus.Account.UserPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("UserPosition", "adm");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Инспектор",
                            Name = "Инспектор"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Старший инспектор",
                            Name = "Старший инспектор"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Ведущий специалист",
                            Name = "Ведущий специалист"
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "Начальник отдела",
                            Name = "Начальник отдела"
                        });
                });

            modelBuilder.Entity("Lotus.Account.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("UserRole", "adm");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Администратор",
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Редактор",
                            Name = "editor"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Пользователь",
                            Name = "user"
                        });
                });

            modelBuilder.Entity("Lotus.Account.UserRolePermissionRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRolePermissionRelation", "adm");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            PermissionId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Lotus.DeNova.AddressElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CadastralNumber")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<string>("Code")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<int>("ElementType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<int?>("StreetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StreetId");

                    b.ToTable("AddressElement", "denova");
                });

            modelBuilder.Entity("Lotus.DeNova.AddressState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<Guid>("AddressStateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BeginPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GameSaveId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PersonId");

                    b.ToTable("AddressState", "denova");
                });

            modelBuilder.Entity("Lotus.DeNova.AddressStreet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("StreetType")
                        .HasColumnType("integer");

                    b.Property<int?>("VillageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VillageId");

                    b.ToTable("AddressStreet", "denova");
                });

            modelBuilder.Entity("Lotus.DeNova.AddressVillage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("OKATO")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("OKTMO")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("VillageSettlementId")
                        .HasColumnType("integer");

                    b.Property<int>("VillageType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VillageSettlementId");

                    b.ToTable("AddressVillage", "denova");
                });

            modelBuilder.Entity("Lotus.DeNova.AddressVillageSettlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("VillageSettlementType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AddressVillageSettlement", "denova");
                });

            modelBuilder.Entity("Lotus.DeNova.AstrologyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GameSettingTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("StoneZodiac")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TreeZodiac")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ZodiacSign")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("AstrologyType", "denova");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameSettingTypeId = 1,
                            StoneZodiac = "Алмаз",
                            TreeZodiac = "Лиана",
                            ZodiacSign = "Змееносец"
                        },
                        new
                        {
                            Id = 2,
                            GameSettingTypeId = 1,
                            StoneZodiac = "Изумруд",
                            TreeZodiac = "Ива",
                            ZodiacSign = "Кецалькоатль"
                        },
                        new
                        {
                            Id = 3,
                            GameSettingTypeId = 1,
                            StoneZodiac = "Топаз",
                            TreeZodiac = "Дуб",
                            ZodiacSign = "Телец"
                        });
                });

            modelBuilder.Entity("Lotus.DeNova.AvatarState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AvatarStateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BeginPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GameSaveId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("PersonId");

                    b.ToTable("AvatarState", "denova");
                });

            modelBuilder.Entity("Lotus.DeNova.BirthdayState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PersonId");

                    b.ToTable("BirthdayState", "denova");
                });

            modelBuilder.Entity("Lotus.DeNova.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Game", "denova");
                });

            modelBuilder.Entity("Lotus.DeNova.GameSave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("GameSave", "denova");
                });

            modelBuilder.Entity("Lotus.DeNova.GameSettingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("GameSettingType", "denova");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Сентра",
                            Name = "Sentra"
                        });
                });

            modelBuilder.Entity("Lotus.DeNova.IdentityState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BeginPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CodeID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("EndPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FatherName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GameSaveId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdentityStateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Surname")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("IdentityState", "denova");
                });

            modelBuilder.Entity("Lotus.DeNova.ParameterAspectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int?>("GameSettingTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ParameterTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParameterTypeId");

                    b.ToTable("ParameterAspectType", "denova");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Сильные руки",
                            GameSettingTypeId = 1,
                            Name = "StrongArms",
                            ParameterTypeId = 1
                        });
                });

            modelBuilder.Entity("Lotus.DeNova.ParameterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int?>("GameSettingTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("ParameterType", "denova");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Физическая сила",
                            GameSettingTypeId = 1,
                            Name = "PhysicalStrength"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Ловкость",
                            GameSettingTypeId = 1,
                            Name = "Dexterity"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Выносливость",
                            GameSettingTypeId = 1,
                            Name = "Endurance"
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "Телосложение",
                            GameSettingTypeId = 1,
                            Name = "Physique"
                        },
                        new
                        {
                            Id = 5,
                            DisplayName = "Восприятие",
                            GameSettingTypeId = 1,
                            Name = "Perception"
                        },
                        new
                        {
                            Id = 6,
                            DisplayName = "Разум",
                            GameSettingTypeId = 1,
                            Name = "Mind"
                        },
                        new
                        {
                            Id = 7,
                            DisplayName = "Сила воли",
                            GameSettingTypeId = 1,
                            Name = "Willpower"
                        },
                        new
                        {
                            Id = 8,
                            DisplayName = "Духовность",
                            GameSettingTypeId = 1,
                            Name = "Spirituality"
                        },
                        new
                        {
                            Id = 9,
                            DisplayName = "Внешность",
                            GameSettingTypeId = 1,
                            Name = "Appearance"
                        },
                        new
                        {
                            Id = 10,
                            DisplayName = "Харизма",
                            GameSettingTypeId = 1,
                            Name = "Charisma"
                        },
                        new
                        {
                            Id = 11,
                            DisplayName = "Влияние",
                            GameSettingTypeId = 1,
                            Name = "Influence"
                        },
                        new
                        {
                            Id = 12,
                            DisplayName = "Статус",
                            GameSettingTypeId = 1,
                            Name = "Status"
                        });
                });

            modelBuilder.Entity("Lotus.DeNova.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppearanceId")
                        .HasColumnType("uuid");

                    b.Property<int?>("AstrologyTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharismaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DexterityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EnduranceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InfluenceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MindId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("PerceptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PhysicalStrengthId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PhysiqueId")
                        .HasColumnType("uuid");

                    b.Property<int>("RaceTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SpiritualityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WillpowerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppearanceId")
                        .IsUnique();

                    b.HasIndex("AstrologyTypeId");

                    b.HasIndex("AvatarId");

                    b.HasIndex("CharismaId")
                        .IsUnique();

                    b.HasIndex("DexterityId")
                        .IsUnique();

                    b.HasIndex("EnduranceId")
                        .IsUnique();

                    b.HasIndex("InfluenceId")
                        .IsUnique();

                    b.HasIndex("MindId")
                        .IsUnique();

                    b.HasIndex("PerceptionId")
                        .IsUnique();

                    b.HasIndex("PhysicalStrengthId")
                        .IsUnique();

                    b.HasIndex("PhysiqueId")
                        .IsUnique();

                    b.HasIndex("RaceTypeId");

                    b.HasIndex("SpiritualityId")
                        .IsUnique();

                    b.HasIndex("StatusId")
                        .IsUnique();

                    b.HasIndex("WillpowerId")
                        .IsUnique();

                    b.ToTable("Person", "denova");
                });

            modelBuilder.Entity("Lotus.DeNova.PersonParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("BaseValue")
                        .HasColumnType("real");

                    b.Property<int>("ParameterTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParameterTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonParameter", "denova");
                });

            modelBuilder.Entity("Lotus.DeNova.PersonParameterAspect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ParameterAspectTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonParameterId")
                        .HasColumnType("uuid");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ParameterAspectTypeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonParameterId");

                    b.ToTable("PersonParameterAspect", "denova");
                });

            modelBuilder.Entity("Lotus.DeNova.PlacementState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GameSaveId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlacementStateId")
                        .HasColumnType("uuid");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<int>("PositionZ")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PlacementState", "denova");
                });

            modelBuilder.Entity("Lotus.DeNova.RaceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int?>("GameSettingTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("RaceType", "denova");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Эриец",
                            GameSettingTypeId = 1,
                            Name = "Erian"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Завротеанен",
                            GameSettingTypeId = 1,
                            Name = "Zavroteanen"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Леохарт",
                            GameSettingTypeId = 1,
                            Name = "Leohart"
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "Триб",
                            GameSettingTypeId = 1,
                            Name = "Tribe"
                        },
                        new
                        {
                            Id = 5,
                            DisplayName = "Гвелл",
                            GameSettingTypeId = 1,
                            Name = "Gwell"
                        },
                        new
                        {
                            Id = 6,
                            DisplayName = "Эль`гоу",
                            GameSettingTypeId = 1,
                            Name = "Elgou"
                        },
                        new
                        {
                            Id = 7,
                            DisplayName = "Фергариец",
                            GameSettingTypeId = 1,
                            Name = "Fergarian"
                        });
                });

            modelBuilder.Entity("Lotus.DeNova.ScenarioType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int?>("GameSettingTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("ScenarioType", "denova");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Песочница",
                            GameSettingTypeId = 1,
                            Name = "Sandbox"
                        });
                });

            modelBuilder.Entity("Lotus.Repository.ResourceFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea");

                    b.Property<int?>("FileTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("LoadPath")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("SaveFormat")
                        .HasColumnType("integer");

                    b.Property<int?>("SizeInBytes")
                        .HasColumnType("integer");

                    b.Property<int>("StorageType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ResourceFile");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("text");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Settings")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications", "security");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", "security");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Resources")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes", "security");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", "security");
                });

            modelBuilder.Entity("Lotus.Account.User", b =>
                {
                    b.HasOne("Lotus.Account.UserPosition", "Post")
                        .WithMany("Users")
                        .HasForeignKey("PostId");

                    b.HasOne("Lotus.Account.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Post");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Lotus.Account.UserFieldActivityRelation", b =>
                {
                    b.HasOne("Lotus.Account.UserFieldActivity", null)
                        .WithMany()
                        .HasForeignKey("FieldActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lotus.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Lotus.Account.UserGroupRelation", b =>
                {
                    b.HasOne("Lotus.Account.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lotus.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Lotus.Account.UserMessage", b =>
                {
                    b.HasOne("Lotus.Account.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Lotus.Account.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.Navigation("Author");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Lotus.Account.UserRolePermissionRelation", b =>
                {
                    b.HasOne("Lotus.Account.UserPermission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lotus.Account.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Lotus.DeNova.AddressElement", b =>
                {
                    b.HasOne("Lotus.DeNova.AddressStreet", "Street")
                        .WithMany("Elements")
                        .HasForeignKey("StreetId");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Lotus.DeNova.AddressState", b =>
                {
                    b.HasOne("Lotus.DeNova.AddressElement", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Lotus.DeNova.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Lotus.DeNova.AddressStreet", b =>
                {
                    b.HasOne("Lotus.DeNova.AddressVillage", "Village")
                        .WithMany("Streets")
                        .HasForeignKey("VillageId");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("Lotus.DeNova.AddressVillage", b =>
                {
                    b.HasOne("Lotus.DeNova.AddressVillageSettlement", "VillageSettlement")
                        .WithMany("Villages")
                        .HasForeignKey("VillageSettlementId");

                    b.Navigation("VillageSettlement");
                });

            modelBuilder.Entity("Lotus.DeNova.AvatarState", b =>
                {
                    b.HasOne("Lotus.Repository.ResourceFile", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Lotus.DeNova.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Lotus.DeNova.BirthdayState", b =>
                {
                    b.HasOne("Lotus.DeNova.AddressElement", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Lotus.DeNova.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Lotus.DeNova.IdentityState", b =>
                {
                    b.HasOne("Lotus.DeNova.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Lotus.DeNova.ParameterAspectType", b =>
                {
                    b.HasOne("Lotus.DeNova.ParameterType", "ParameterType")
                        .WithMany()
                        .HasForeignKey("ParameterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParameterType");
                });

            modelBuilder.Entity("Lotus.DeNova.Person", b =>
                {
                    b.HasOne("Lotus.DeNova.PersonParameter", "Appearance")
                        .WithOne()
                        .HasForeignKey("Lotus.DeNova.Person", "AppearanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.DeNova.AstrologyType", "AstrologyType")
                        .WithMany()
                        .HasForeignKey("AstrologyTypeId");

                    b.HasOne("Lotus.Repository.ResourceFile", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("Lotus.DeNova.PersonParameter", "Charisma")
                        .WithOne()
                        .HasForeignKey("Lotus.DeNova.Person", "CharismaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.DeNova.PersonParameter", "Dexterity")
                        .WithOne()
                        .HasForeignKey("Lotus.DeNova.Person", "DexterityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.DeNova.PersonParameter", "Endurance")
                        .WithOne()
                        .HasForeignKey("Lotus.DeNova.Person", "EnduranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.DeNova.PersonParameter", "Influence")
                        .WithOne()
                        .HasForeignKey("Lotus.DeNova.Person", "InfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.DeNova.PersonParameter", "Mind")
                        .WithOne()
                        .HasForeignKey("Lotus.DeNova.Person", "MindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.DeNova.PersonParameter", "Perception")
                        .WithOne()
                        .HasForeignKey("Lotus.DeNova.Person", "PerceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.DeNova.PersonParameter", "PhysicalStrength")
                        .WithOne()
                        .HasForeignKey("Lotus.DeNova.Person", "PhysicalStrengthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.DeNova.PersonParameter", "Physique")
                        .WithOne()
                        .HasForeignKey("Lotus.DeNova.Person", "PhysiqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.DeNova.RaceType", "RaceType")
                        .WithMany()
                        .HasForeignKey("RaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.DeNova.PersonParameter", "Spirituality")
                        .WithOne()
                        .HasForeignKey("Lotus.DeNova.Person", "SpiritualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.DeNova.PersonParameter", "Status")
                        .WithOne()
                        .HasForeignKey("Lotus.DeNova.Person", "StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.DeNova.PersonParameter", "Willpower")
                        .WithOne()
                        .HasForeignKey("Lotus.DeNova.Person", "WillpowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appearance");

                    b.Navigation("AstrologyType");

                    b.Navigation("Avatar");

                    b.Navigation("Charisma");

                    b.Navigation("Dexterity");

                    b.Navigation("Endurance");

                    b.Navigation("Influence");

                    b.Navigation("Mind");

                    b.Navigation("Perception");

                    b.Navigation("PhysicalStrength");

                    b.Navigation("Physique");

                    b.Navigation("RaceType");

                    b.Navigation("Spirituality");

                    b.Navigation("Status");

                    b.Navigation("Willpower");
                });

            modelBuilder.Entity("Lotus.DeNova.PersonParameter", b =>
                {
                    b.HasOne("Lotus.DeNova.ParameterType", "ParameterType")
                        .WithMany()
                        .HasForeignKey("ParameterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.DeNova.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("ParameterType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Lotus.DeNova.PersonParameterAspect", b =>
                {
                    b.HasOne("Lotus.DeNova.ParameterAspectType", "ParameterAspectType")
                        .WithMany()
                        .HasForeignKey("ParameterAspectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.DeNova.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.DeNova.PersonParameter", "PersonParameter")
                        .WithMany("Aspects")
                        .HasForeignKey("PersonParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParameterAspectType");

                    b.Navigation("Person");

                    b.Navigation("PersonParameter");
                });

            modelBuilder.Entity("Lotus.DeNova.PlacementState", b =>
                {
                    b.HasOne("Lotus.DeNova.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("Lotus.Account.UserPosition", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Lotus.Account.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Lotus.DeNova.AddressStreet", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("Lotus.DeNova.AddressVillage", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Lotus.DeNova.AddressVillageSettlement", b =>
                {
                    b.Navigation("Villages");
                });

            modelBuilder.Entity("Lotus.DeNova.PersonParameter", b =>
                {
                    b.Navigation("Aspects");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
