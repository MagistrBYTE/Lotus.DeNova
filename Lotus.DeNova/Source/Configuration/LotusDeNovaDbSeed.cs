//=====================================================================================================================
// Проект: Модуль игровой вселенной DeNova
// Раздел: Подсистема конфигурации и инициализации
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusDeNovaDbSeed.cs
*		Статический класс для первоначальной инициализации базы данных.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using Microsoft.EntityFrameworkCore;
//=====================================================================================================================
namespace Lotus
{
    namespace DeNova
    {
        //-------------------------------------------------------------------------------------------------------------
        /** \addtogroup DeNovaConfiguration
        *@{*/
        //-------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Статический класс для конфигурации и инициализации базы данных
        /// </summary>
        //-------------------------------------------------------------------------------------------------------------
        public static class XDbSeed
        {
			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание сущностей по умолчанию
			/// </summary>
			/// <param name="modelBuilder">Интерфейс для построения моделей</param>
			//---------------------------------------------------------------------------------------------------------
			public static void Create(ModelBuilder modelBuilder)
			{
				CreateCampaignSetting(modelBuilder);
				CreateRace(modelBuilder);
				CreateAstrology(modelBuilder);
			}
			#endregion

			#region ======================================= ОПРЕДЕЛЕНИЕ ДАННЫХ ========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание сеттингов игры
			/// </summary>
			/// <param name="modelBuilder">Интерфейс для построения моделей</param>
			//---------------------------------------------------------------------------------------------------------
			public static void CreateCampaignSetting(ModelBuilder modelBuilder)
			{
				// Определение для таблицы
				var model = modelBuilder.Entity<CampaignSetting>();

				// Данные
				model.HasData(XCampaignSettingConstants.Sentra);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание рас
			/// </summary>
			/// <param name="modelBuilder">Интерфейс для построения моделей</param>
			//---------------------------------------------------------------------------------------------------------
			public static void CreateRace(ModelBuilder modelBuilder)
			{
				// Определение для таблицы
				var model = modelBuilder.Entity<Race>();

				// Данные
				model.HasData(XRaceConstants.Erian, 
					XRaceConstants.Zavroteanen,
					XRaceConstants.Leohart, 
					XRaceConstants.Tribe,
					XRaceConstants.Gnol,
					XRaceConstants.Elgou,
					XRaceConstants.Fergarian);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание астрологий
			/// </summary>
			/// <param name="modelBuilder">Интерфейс для построения моделей</param>
			//---------------------------------------------------------------------------------------------------------
			public static void CreateAstrology(ModelBuilder modelBuilder)
			{
				// Определение для таблицы
				var model = modelBuilder.Entity<Astrology>();

				// Данные
				model.HasData(XAstrologyConstants.Ophiuchus,
					XAstrologyConstants.Quetzalcoatl,
					XAstrologyConstants.Taurus);
			}
			#endregion
		}
        //-------------------------------------------------------------------------------------------------------------
        /**@}*/
        //-------------------------------------------------------------------------------------------------------------
    }
}
//=====================================================================================================================