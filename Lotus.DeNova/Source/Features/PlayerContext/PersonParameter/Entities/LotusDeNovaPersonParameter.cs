//=====================================================================================================================
// Проект: Модуль игровой вселенной DeNova
// Раздел: Подсистема параметров персонажа
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusDeNovaPersonParameter.cs
*		Класс для определения параметра персонажа персонажа.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
//---------------------------------------------------------------------------------------------------------------------
#if USE_EFC
using Microsoft.EntityFrameworkCore;
#endif
//---------------------------------------------------------------------------------------------------------------------
using Lotus.Core;
//=====================================================================================================================
namespace Lotus
{
	namespace DeNova
	{
		//-------------------------------------------------------------------------------------------------------------
		/**
         * \defgroup DeNovaPersonParameter Подсистема параметров персонажа
         * \ingroup DeNova
         * \brief Подсистема параметров персонажа.
         * @{
         */
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Класс для определения параметра персонажа персонажа
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public class PersonParameter : EntityDb<Guid>
		{
			#region ======================================= КОНСТАНТНЫЕ ДАННЫЕ ========================================
			/// <summary>
			/// Имя таблицы
			/// </summary>
			public const String TABLE_NAME = "PersonParameter";
			#endregion

			#region ======================================= МЕТОДЫ ОПРЕДЕЛЕНИЯ МОДЕЛЕЙ ================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конфигурирование модели для типа <see cref="PersonParameter"/>
			/// </summary>
			/// <param name="modelBuilder">Интерфейс для построения моделей</param>
			//---------------------------------------------------------------------------------------------------------
			public static void ModelCreating(ModelBuilder modelBuilder)
			{
				// Определение для таблицы
				var model = modelBuilder.Entity<PersonParameter>();
				model.ToTable(TABLE_NAME, XDbConstants.SchemeName);
			}
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Идентификатор типа параметра
			/// </summary>
			public Int32 ParameterTypeId { get; set; }

			/// <summary>
			/// Навигационное свойство для типа параметра
			/// </summary>
			[ForeignKey(nameof(ParameterTypeId))]
			public virtual ParameterType ParameterType { get; set; } = default!;

			/// <summary>
			/// Значение параметра
			/// </summary>
			public Single BaseValue { get; set; }

			/// <summary>
			/// Идентификатор персонажа
			/// </summary>
			public Guid? PersonId { get; set; }

			/// <summary>
			/// Навигационное свойство для персонажа
			/// </summary>
			[ForeignKey(nameof(PersonId))]
			public virtual Person? Person { get; set; } = default!;

			/// <summary>
			/// Аспекты развития параметра
			/// </summary>
			public List<PersonParameterAspect> Aspects { get; set; } = new List<PersonParameterAspect>();
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные списка предустановленными данными
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public PersonParameter()
			{
				Id = Guid.NewGuid();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными данными
			/// </summary>
			/// <param name="parameterTypeId">Идентификатор типа параметра</param>
			//---------------------------------------------------------------------------------------------------------
			public PersonParameter(Int32 parameterTypeId)
			{
				Id = Guid.NewGuid();
				ParameterTypeId = parameterTypeId;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными данными
			/// </summary>
			/// <param name="parameterTypeId">Идентификатор типа параметра</param>
			/// <param name="personId">Идентификатор персонажа</param>
			//---------------------------------------------------------------------------------------------------------
			public PersonParameter(Int32 parameterTypeId, Guid personId)
			{
				Id = Guid.NewGuid();
				ParameterTypeId = parameterTypeId;
				PersonId = personId;
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Имя объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				var name = XParameterTypeConstants.PersonParameters.First(x => x.Id == ParameterTypeId).DisplayName;
				return ($"{name} | {BaseValue}");
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================
