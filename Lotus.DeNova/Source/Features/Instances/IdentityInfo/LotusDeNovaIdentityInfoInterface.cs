//=====================================================================================================================
// Проект: Модуль игровой вселенной DeNova
// Раздел: Подсистема идентификации персонажа
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusDeNovaIdentityInfoInterface.cs
*		Определение интерфейса сервиса для работы с идентификационными сведениями о персонаже.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using Lotus.Account;
using Lotus.Repository;
//=====================================================================================================================
namespace Lotus
{
    namespace DeNova
	{
		//-------------------------------------------------------------------------------------------------------------
		/** \addtogroup DeNovaIdentityInfo
		*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс сервиса для работы с идентификационными сведениями о персонаже
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusIdentityInfoService
        {
            //---------------------------------------------------------------------------------------------------------
            /// <summary>
            /// Создание идентификационных сведений о персонаже по указанным данным
            /// </summary>
            /// <param name="identityInfoCreate">Параметры для создания идентификационных сведений о персонаже</param>
            /// <param name="token">Токен отмены</param>
            /// <returns>Идентификационные сведения о персонаже</returns>
            //---------------------------------------------------------------------------------------------------------
            Task<Response<IdentityInfoDto>> CreateAsync(IdentityInfoCreateDto identityInfoCreate, CancellationToken token);

            //---------------------------------------------------------------------------------------------------------
            /// <summary>
            /// Обновление данных идентификационных сведений о персонаже
            /// </summary>
            /// <param name="identityInfoUpdate">Параметры обновляемой идентификационных сведений о персонаже</param>
            /// <param name="token">Токен отмены</param>
            /// <returns>Идентификационные сведения о персонаже</returns>
            //---------------------------------------------------------------------------------------------------------
            Task<Response<IdentityInfoDto>> UpdateAsync(IdentityInfoDto identityInfoUpdate, CancellationToken token);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение указанного идентификационных сведений о персонаже
			/// </summary>
			/// <param name="identityInfoId">Идентификатор идентификационных сведений о персонаже</param>
			/// <param name="token">Токен отмены</param>
			/// <returns>Идентификационные сведения о персонаже</returns>
			//---------------------------------------------------------------------------------------------------------
			Task<Response<IdentityInfoDto>> GetAsync(Guid identityInfoId, CancellationToken token);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение списка мест жительств персонажа 
			/// </summary>
			/// <param name="identityInfoRequest">Параметры получения списка</param>
			/// <param name="token">Токен отмены</param>
			/// <returns>Список аватаров персонажа</returns>
			//---------------------------------------------------------------------------------------------------------
			Task<ResponsePage<IdentityInfoDto>> GetAllAsync(IdentityInfosDto identityInfoRequest, CancellationToken token);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление идентификационных сведений о персонаже
			/// </summary>
			/// <param name="identityInfoId">Идентификатор идентификационных сведений о персонаже</param>
			/// <param name="token">Токен отмены</param>
			/// <returns>Статус успешности</returns>
			//---------------------------------------------------------------------------------------------------------
			Task<Response> DeleteAsync(Guid identityInfoId, CancellationToken token);
        }
        //-------------------------------------------------------------------------------------------------------------
        /**@}*/
        //-------------------------------------------------------------------------------------------------------------
    }
}
//=====================================================================================================================