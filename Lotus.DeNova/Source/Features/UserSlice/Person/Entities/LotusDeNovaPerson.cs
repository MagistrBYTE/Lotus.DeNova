//=====================================================================================================================
// Проект: Модуль игровой вселенной DeNova
// Раздел: Подсистема персонажа
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusDeNovaPerson.cs
*		Класс для определения персонажа.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
//---------------------------------------------------------------------------------------------------------------------
#if USE_EFC
using Microsoft.EntityFrameworkCore;
#endif
//---------------------------------------------------------------------------------------------------------------------
using Lotus.Core;
//=====================================================================================================================
namespace Lotus
{
	namespace DeNova
	{
		//-------------------------------------------------------------------------------------------------------------
		/**
         * \defgroup DeNovaPerson Подсистема персонажа
         * \ingroup DeNova
         * \brief Подсистема персонажа.
         * @{
         */
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Класс для определения персонажа
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public class Person : EntityDb<Int32>, IComparable<Person>
		{
			#region ======================================= КОНСТАНТНЫЕ ДАННЫЕ ========================================
			/// <summary>
			/// Имя таблицы
			/// </summary>
			public const String TABLE_NAME = "Person";
			#endregion

			#region ======================================= МЕТОДЫ ОПРЕДЕЛЕНИЯ МОДЕЛЕЙ ================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конфигурирование модели для типа <see cref="Person"/>
			/// </summary>
			/// <param name="modelBuilder">Интерфейс для построения моделей</param>
			//---------------------------------------------------------------------------------------------------------
			public static void ModelCreating(ModelBuilder modelBuilder)
			{
				// Определение для таблицы
				var model = modelBuilder.Entity<Person>();
				model.ToTable(TABLE_NAME, XDbConstants.SchemeName);
			}
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Идентификатор игрока
			/// </summary>
			public Guid UserId { get; set; }

			/// <summary>
			/// Имя персонажа
			/// </summary>
			[MaxLength(20)]
			public String Name { get; set; } = null!;

			/// <summary>
			/// Идентификатор аватара
			/// </summary>
			public Int32? AvatarId { get; set; }

			/// <summary>
			/// Навигационное свойство для аватара
			/// </summary>
			[ForeignKey(nameof(AvatarId))]
			public Image? Avatar { get; set; }

			/// <summary>
			/// Статус локального аватара
			/// </summary>
			[NotMapped]
			public Boolean IsLocalAvatar
			{
				get
				{
					if(Avatar == null) return false;
					return Avatar.IsLocal;
				}
			}

			/// <summary>
			/// Идентификатор расы
			/// </summary>
			public Int32 RaceId { get; set; }

			/// <summary>
			/// Навигационное свойство для расы
			/// </summary>
			[ForeignKey(nameof(RaceId))]
			public Race Race { get; set; } = null!;

			/// <summary>
			/// Идентификатор информации о астрологических сведениях
			/// </summary>
			public Int32? AstrologyId { get; set; }

			/// <summary>
			/// Навигационное свойство для астрологических сведениях
			/// </summary>
			[ForeignKey(nameof(AstrologyId))]
			public Astrology? Astrology { get; set; }
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус сравнения объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 CompareTo(Person? other)
			{
				return 0;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Имя объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return (Name);
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================
