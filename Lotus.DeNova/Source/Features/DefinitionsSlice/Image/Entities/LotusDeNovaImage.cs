//=====================================================================================================================
// Проект: Модуль игровой вселенной DeNova
// Раздел: Подсистема изображений
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusDeNovaImage.cs
*		Класс для определения изображения.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System;
using System.ComponentModel.DataAnnotations;
//---------------------------------------------------------------------------------------------------------------------
#if USE_EFC
using Microsoft.EntityFrameworkCore;
#endif
//---------------------------------------------------------------------------------------------------------------------
using Lotus.Core;
//=====================================================================================================================
namespace Lotus
{
	namespace DeNova
	{
		//-------------------------------------------------------------------------------------------------------------
		/**
         * \defgroup DeNovaImage Подсистема изображений
         * \ingroup DeNova
         * \brief Подсистема изображений.
         * @{
         */
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Класс для определения изображения
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public class Image : EntityDb<Int32>, IComparable<Image>
		{
			#region ======================================= КОНСТАНТНЫЕ ДАННЫЕ ========================================
			/// <summary>
			/// Имя таблицы
			/// </summary>
			public const String TABLE_NAME = "Image";
			#endregion

			#region ======================================= МЕТОДЫ ОПРЕДЕЛЕНИЯ МОДЕЛЕЙ ================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конфигурирование модели для типа <see cref="Image"/>
			/// </summary>
			/// <param name="modelBuilder">Интерфейс для построения моделей</param>
			//---------------------------------------------------------------------------------------------------------
			public static void ModelCreating(ModelBuilder modelBuilder)
			{
				// Определение для таблицы
				var model = modelBuilder.Entity<Image>();
				model.ToTable(TABLE_NAME, XDbConstants.SchemeName);
			}
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Идентификатор сеттинга игры
			/// </summary>
			public Int32? CampaignSettingId { get; set; }

			/// <summary>
			/// Наименование изображения
			/// </summary>
			[MaxLength(20)]
			public String? Name { get; set; }

			/// <summary>
			/// Статус локального изображения (которое храниться на клиенте)
			/// </summary>
			public Boolean IsLocal { get; set; }

			/// <summary>
			/// Uri для загрузки изображения
			/// </summary>
			[MaxLength(256)]
			public String? LoadPath { get; set; }

			/// <summary>
			/// Ширина изображения в пикселях
			/// </summary>
			public Int32? Width { get; set; }

			/// <summary>
			/// Высота изображения в пикселях
			/// </summary>
			public Int32? Height { get; set; }

			/// <summary>
			/// Размер изображения в байтах
			/// </summary>
			public Int32? SizeInBytes { get; set; }

			/// <summary>
			/// Данные изображения
			/// </summary>
			public Byte[]? DataImage { get; set; }
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус сравнения объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 CompareTo(Image? other)
			{
				if (other == null) return 0;
				return (Name.CompareTo(other.Name));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Имя объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return (Name);
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================
